[project]
name = "openethos-securityguard"
version = "0.0.0" # This will be updated by a script or standalone file
description = "A security monitoring and alerting tool."
readme = "README.md"
requires-python = ">=3.8"
license = { file = "LICENSE" }
keywords = ["security", "monitoring", "alerting"]
authors = [
    { name = "Jason Miller", email = "jason.miller@thoughtparameters.com" }
]
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Topic :: Security",
    "Topic :: System :: Monitoring",
]
dependencies = [
    "pydantic>=1.8",
    "rich>=10.0",
    "click>=8.0",
    "requests>=2.25",
    "PyYAML>=6.0.3"
]

[project.scripts]
sg = "securityguard.__main__:main"

[project.urls]
changelog = "https://github.com/OpenEthos/securityguard/blob/master/CHANGELOG.md"
documentation = "https://openethos-securityguard.thoughtparameters.com"
homepage = "https://openethos-securityguard.thoughtparameters.com"
repository = "https://github.com/OpenEthos/securityguard.git"
issues = "https://github.com/OpenEthos/securityguard/issues"

[project.optional-dependencies]
build = [
  "build ~= 1.2"
]
docs = [
  "Sphinx ~= 6.0",
  "sphinxcontrib-apidoc == 0.5.0",
  "sphinx-autobuild == 2024.2.4",
  "furo ~= 2024.1",
]
test = [
  "coverage[toml] ~= 7.0",
  "filelock ~= 3.15",
  "flatdict ~= 4.0",
  "freezegun ~= 1.5",
  "pyyaml ~= 6.0",
  "pytest ~= 8.3",
  "pytest-clarity ~= 1.0",
  "pytest-cov >= 5.0.0, < 7.0.0",
  "pytest-env ~= 1.0",
  "pytest-lazy-fixtures ~= 1.3.4",
  "pytest-mock ~= 3.0",
  "pytest-order ~= 1.3",
  "pytest-pretty ~= 1.2",
  "pytest-xdist ~= 3.0",
  "responses ~= 0.25.0",
  "requests-mock ~= 1.10",
]
dev = [
  "pre-commit ~= 4.3",
  "tox ~= 4.11",
  "ruff == 0.6.1"
]
mypy = [
  "mypy == 1.16.1",
  "types-Deprecated ~= 1.2",
  "types-requests ~= 2.32.0",
  "types-pyyaml ~= 6.0",
]

[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[tools.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
where = ["src"]

[tool.semantic_release]
commit_parser = "conventional"
commit_parser_options = { parse_squash_commits = true, ignore_merge_commits = true }
build_command = """
  python -m pip install -e .[build]
  python -m build .
""""

[tool.semantic_release.version_variable]
file = "pyproject.toml"
key = "version"


[tool.pytest.ini_options]
pythonpath = [
  "src",
]
testpaths = [
  "tests",
]
env = [
  "PYTHONHASHSEED = 123456"
]
addopts = [
  # TO DEBUG in single process, swap auto to 0
  # "-nauto",
  # "-n0",
  "-ra",
  "--diff-symbols",
  "--durations=20",
  # No default coverage - causes problems with debuggers
  # "--cov=semantic_release",
  # "--cov-context=test",
  # "--cov-report=html:coverage-html",
  # "--cov-report=term-missing",
]
markers = [
  "unit: mark a test as a unit test",
  "e2e: mark a test as a end-to-end test",
  "comprehensive: mark a test as a comprehensive (multiple variations) test",
]

[tool.tox]
legacy_tox_ini = """
[tox]
envlist =
    mypy,
    py{38,39,310,311,312},
    coverage
    ruff
skipsdist = True

[testenv]
passenv = CI
setenv =
    PYTHONPATH = {toxinidir}
    TESTING = True
deps = .[test]
commands =
    coverage run -p --source=securityguard -m pytest {posargs:tests}

[testenv:mypy]
deps = .[mypy]
commands =
    mypy .

[testenv:coverage]
deps = coverage[toml]
commands =
    coverage combine
    coverage report -m
    coverage xml

[testenv:ruff]
deps = .[dev]
commands =
    ruff check . --statistics --output-format=text
"""

[tool.ruff]
line-length = 88
target-version = "py38"
force-exclude = true
output-format = "grouped"
show-fixes = true
src = ["semantic_release", "tests"]

[tool.ruff.lint]
select = ["ALL"]

[tool.ruff.format]
docstring-code-format = true
indent-style = "space"
line-ending = "lf"
quote-style = "double"

